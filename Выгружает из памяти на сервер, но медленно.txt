#include <WiFi.h>
#include <HTTPClient.h>
#include <FS.h>
#include <SPIFFS.h>
#include <time.h>

const char *ssid = "Zam Deputata";        // Your Wi-Fi network name
const char *password = "Ra632Tnbdwa_Dn";  // Your Wi-Fi network password

const char *host = "api.thingspeak.com";
const char *api_key = "YGABPVZSCX5NJB3A";  // API key for your ThingSpeak channel

#define RING_BUFFER_SIZE 256
#define SYNC_LENGTH 9000
#define SEP_LENGTH 500
#define BIT1_LENGTH 4000
#define BIT0_LENGTH 2000
#define DATAPIN 4  // Use appropriate GPIO pin number for your setup

unsigned long timings[RING_BUFFER_SIZE];
volatile unsigned int syncIndex1 = 0;  // Index of the first sync signal
volatile unsigned int syncIndex2 = 0;  // Index of the second sync signal
volatile bool received = false;

int count = 0;  // Counter for received temperature values

// Detect if a sync signal is present
bool isSync(unsigned int idx) {
  unsigned long t0 = timings[(idx + RING_BUFFER_SIZE - 1) % RING_BUFFER_SIZE];
  unsigned long t1 = timings[idx];

  if (t0 > (SEP_LENGTH - 100) && t0 < (SEP_LENGTH + 100) && t1 > (SYNC_LENGTH - 1000) && t1 < (SYNC_LENGTH + 1000) && digitalRead(DATAPIN) == HIGH) {
    return true;
  }
  return false;
}

// Interrupt handler
void IRAM_ATTR handler() {
  static unsigned long duration = 0;
  static unsigned long lastTime = 0;
  static unsigned int ringIndex = 0;
  static unsigned int syncCount = 0;

  if (received == true) {
    return;
  }
  long time = micros();
  duration = time - lastTime;
  lastTime = time;

  ringIndex = (ringIndex + 1) % RING_BUFFER_SIZE;
  timings[ringIndex] = duration;

  if (isSync(ringIndex)) {
    syncCount++;
    if (syncCount == 1) {
      syncIndex1 = (ringIndex + 1) % RING_BUFFER_SIZE;
    } else if (syncCount == 2) {
      syncCount = 0;
      syncIndex2 = (ringIndex + 1) % RING_BUFFER_SIZE;
      unsigned int changeCount = (syncIndex2 < syncIndex1) ? (syncIndex2 + RING_BUFFER_SIZE - syncIndex1) : (syncIndex2 - syncIndex1);
      if (changeCount != 74) {
        received = false;
        syncIndex1 = 0;
        syncIndex2 = 0;
      } else {
        received = true;
      }
    }
  }
}

void setup() {
  Serial.begin(9600);
  Serial.println("Started.");
  pinMode(DATAPIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(DATAPIN), handler, CHANGE);

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("Failed to mount SPIFFS filesystem");
    return;
  }

  connectWiFi();  // Connect to Wi-Fi
}

void loop() {
  if (received == true) {
    detachInterrupt(digitalPinToInterrupt(DATAPIN));
    unsigned long temp = 0;
    bool negative = false;
    bool fail = false;
    for (unsigned int i = (syncIndex1 + 32) % RING_BUFFER_SIZE; i != (syncIndex1 + 56) % RING_BUFFER_SIZE; i = (i + 2) % RING_BUFFER_SIZE) {
      unsigned long t0 = timings[i], t1 = timings[(i + 1) % RING_BUFFER_SIZE];
      if (t0 > (SEP_LENGTH - 100) && t0 < (SEP_LENGTH + 100)) {
        if (t1 > (BIT1_LENGTH - 1000) && t1 < (BIT1_LENGTH + 1000)) {
          if (i == (syncIndex1 + 32) % RING_BUFFER_SIZE) negative = true;
          temp = (temp << 1) + 1;
        } else if (t1 > (BIT0_LENGTH - 1000) && t1 < (BIT0_LENGTH + 1000)) {
          temp = (temp << 1) + 0;
        } else {
          fail = true;
        }
      } else {
        fail = true;
      }
    }

    if (!fail) {
      if (negative) {
        temp = 4096 - temp;
        Serial.print("-");
      }
      float temperature = temp / 10.0;
      Serial.print(temperature);
      Serial.write(176);  // Degree symbol
      Serial.println("C/");

      count++;  // Increment counter

      // Write data to file with timestamp
      File file = SPIFFS.open("/temperature.txt", FILE_APPEND);
      if (!file) {
        Serial.println("Failed to open file for writing");
      } else {
        String data = String(time(nullptr)) + "," + String(temperature);
        file.println(data);
        file.close();
      }

      delay(1000);
    } else {
      Serial.println("Decoding error.");
    }
    received = false;
    syncIndex1 = 0;
    syncIndex2 = 0;
    attachInterrupt(digitalPinToInterrupt(DATAPIN), handler, CHANGE);
  }

  if (WiFi.status() == WL_CONNECTED) {
    sendDataToThingspeak();
  }

  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command.equalsIgnoreCase("READ")) {
      readTemperatureData();
    }
  }
}

// Function to read data from file
void readTemperatureData() {
  File file = SPIFFS.open("/temperature.txt", FILE_READ);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }

  while (file.available()) {
    Serial.write(file.read());
  }
  file.close();
}

// URL Encoding function
String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  char code2;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      code2 = '\0';
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
    yield();
  }
  return encodedString;
}

// Function to send all data to ThingSpeak
void sendDataToThingspeak() {
  File file = SPIFFS.open("/temperature.txt", FILE_READ);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }

  WiFiClient wifiClient;
  HTTPClient http;

  while (file.available()) {
    String data = file.readStringUntil('\n');
    int commaIndex = data.indexOf(',');
    String timestamp = data.substring(0, commaIndex);
    String temperature = data.substring(commaIndex + 1);

    String url = "/update?api_key=";
    url += api_key;
    url += "&field1=";
    url += urlEncode(temperature);
    url += "&field2=" + urlEncode(timestamp);  // Add timestamp to field2

    Serial.print("Request URL: ");  // Debug output
    Serial.println(url);

    http.begin(wifiClient, host, 80, url);  // Begin HTTP connection
    int httpCode = http.GET();              // Send GET request

    if (httpCode > 0) {
      Serial.printf("[HTTP] GET... code: %d\n", httpCode);
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println(payload);  // Print server response
      }
    } else {
      Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();  // End HTTP connection

    delay(15000);  // ThingSpeak allows updates every 15 seconds
  }

  file.close();

  // Delete file after sending data
  SPIFFS.remove("/temperature.txt");
}

// Connect to Wi-Fi
void connectWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 5) {
    delay(1000);
    Serial.println("Attempting to connect to WiFi...");
    attempts++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi!");
    setTimeFromNTP();  // Sync time with NTP server upon connection
  } else {
    Serial.println("Failed to connect to WiFi!");
  }
}

// Sync time with NTP server
void setTimeFromNTP() {
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  while (time(nullptr) < 100000) {
    delay(100);
  }
  Serial.println("Time synchronized");
}
